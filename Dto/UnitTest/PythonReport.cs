// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CC.Net.Dto.UnitTest;
//
//    var pythonReport = PythonReport.FromJson(jsonString);

namespace CC.Net.Dto.UnitTest
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PythonReport
    {
        [JsonProperty("report")]
        public Report Report { get; set; }
    }

    public partial class Report
    {
        [JsonProperty("environment")]
        public Environment Environment { get; set; }

        [JsonProperty("tests")]
        public List<Test> Tests { get; set; }

        [JsonProperty("summary")]
        public Summary Summary { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }
    }

    public partial class Environment
    {
        [JsonProperty("Python")]
        public string Python { get; set; }

        [JsonProperty("Platform")]
        public string Platform { get; set; }
    }

    public partial class Summary
    {
        [JsonProperty("passed")]
        public long Passed { get; set; }

        [JsonProperty("num_tests")]
        public long NumTests { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }
    }

    public partial class Test
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("run_index")]
        public long RunIndex { get; set; }

        [JsonProperty("setup")]
        public Call Setup { get; set; }

        [JsonProperty("call")]
        public Call Call { get; set; }

        [JsonProperty("teardown")]
        public Call Teardown { get; set; }

        [JsonProperty("outcome")]
        public string Outcome { get; set; }
    }

    public partial class Call
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public double Duration { get; set; }

        [JsonProperty("outcome")]
        public string Outcome { get; set; }
    }

    public partial class PythonReport
    {
        public static PythonReport FromJson(string json) => JsonConvert.DeserializeObject<PythonReport>(json, CC.Net.Dto.UnitTest.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PythonReport self) => JsonConvert.SerializeObject(self, CC.Net.Dto.UnitTest.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
